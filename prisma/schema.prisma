generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                  String      @id @default(auto()) @map("_id") @db.ObjectId
  nome                String
  email               String      @unique // Adicione esta linha
  senha               String
  role                String      @default("USER")
  telefone            String?
  enderecos           Endereco[] // Relação one-to-many
  cpf                 String? // Sem @unique
  dataNascimento      DateTime?
  avatar              String?
  emailVerificado     Boolean     @default(false)
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
  vehicles            Vehicle[]
  veiculosFavoritos   Favorito[]
  visualizacoes       ViewLog[]
  avaliacoes          Avaliacao[]
  vendasComoVendedor  Venda[]     @relation("VendasComoVendedor")
  vendasComoComprador Venda[]     @relation("VendasComoComprador")

  // Recuperação de senha
  resetToken       String?
  resetTokenExpiry DateTime?
}

model Vehicle {
  id                    String        @id @default(auto()) @map("_id") @db.ObjectId
  marca                 String
  modelo                String
  anoFabricacao         Int
  anoModelo             Int
  preco                 Float
  precoPromocional      Float?
  descricao             String?
  quilometragem         Float
  tipoCombustivel       combustivel
  cambio                cambio
  cor                   String
  portas                Int
  finalPlaca            Int?
  carroceria            carroceria
  potencia              Int? // cv
  motor                 String?
  categoria             categoria
  classe                classe
  imagens               Image[]
  videos                Video[]
  especificacoes        Json? // Detalhes técnicos em JSON
  vendedorId            String        @db.ObjectId
  vendedor              User          @relation(fields: [vendedorId], references: [id])
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  status                statusVeiculo @default(DISPONIVEL)
  visualizacoes         Int           @default(0)
  favoritos             Favorito[]
  visualizacoesDetalhes ViewLog[]
  avaliacoes            Avaliacao[]
  vendas                Venda[]
  destaque              Boolean       @default(false)
  seloOriginal          Boolean       @default(false)
  aceitaTroca           Boolean       @default(false)
  parcelamento          Float? // Valor da parcela exemplo

  localizacao   Endereco? @relation(fields: [localizacaoId], references: [id])
  localizacaoId String?   @db.ObjectId // Sem @unique

  @@index([marca])
  @@index([modelo])
  @@index([anoFabricacao])
  @@index([anoModelo])
  @@index([preco])
  @@index([categoria])
  @@index([classe])
  @@index([status])
  @@index([destaque])
}

model Endereco {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  cep         String
  logradouro  String
  numero      String
  complemento String?
  bairro      String
  cidade      String
  estado      String
  pais        String    @default("Brasil")
  latitude    Float?
  longitude   Float?
  vehicles    Vehicle[] // Múltiplos veículos podem usar o mesmo endereço
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @db.ObjectId // Chave estrangeira
  createdAt   DateTime? @default(now()) // Temporariamente nullable
  updatedAt   DateTime  @updatedAt
}

model Favorito {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId // ✅ Corrigido
  vehicleId String   @db.ObjectId // ✅ Corrigido
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  vehicle   Vehicle  @relation(fields: [vehicleId], references: [id])

  @@unique([userId, vehicleId])
  @@index([userId])
  @@index([vehicleId])
}

model ViewLog {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  vehicleId String   @db.ObjectId // ✅ Corrigido
  userId    String?  @db.ObjectId // ✅ Corrigido (note o "?" para campos opcionais)
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  vehicle   Vehicle  @relation(fields: [vehicleId], references: [id])
  user      User?    @relation(fields: [userId], references: [id])

  @@index([vehicleId])
  @@index([userId])
  @@index([createdAt])
}

model Image {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  url       String
  isMain    Boolean @default(false)
  ordem     Int     @default(0)
  vehicleId String  @db.ObjectId
  vehicle   Vehicle @relation(fields: [vehicleId], references: [id])

  @@index([vehicleId])
}

model Video {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  url       String
  isMain    Boolean @default(false)
  vehicleId String  @db.ObjectId
  vehicle   Vehicle @relation(fields: [vehicleId], references: [id])

  @@index([vehicleId])
}

model Avaliacao {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  vehicleId  String   @db.ObjectId // ✅ Corrigido
  userId     String?  @db.ObjectId // ✅ Corrigido (note o "?" para campos opcionais)
  rating     Int      @default(5) // 1-5 estrelas
  comentario String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  vehicle    Vehicle  @relation(fields: [vehicleId], references: [id])
  user       User?    @relation(fields: [userId], references: [id]) // Relação opcional

  @@index([vehicleId])
  @@index([userId])
}

model Venda {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  vehicleId        String    @db.ObjectId
  vendedorId       String    @db.ObjectId
  compradorId      String    @db.ObjectId
  precoVenda       Float
  formaPagamento   String
  parcelas         Int?
  observacoes      String?
  categoria        categoria
  status           String?   @default("CONCLUIDA")
  categoriaVeiculo String? // Novo campo
  dataVenda        DateTime  @default(now())
  dataCriacao      DateTime  @default(now())
  dataAtualizacao  DateTime  @updatedAt

  // Relações
  vehicle   Vehicle @relation(fields: [vehicleId], references: [id])
  vendedor  User    @relation("VendasComoVendedor", fields: [vendedorId], references: [id])
  comprador User    @relation("VendasComoComprador", fields: [compradorId], references: [id])

  @@index([vehicleId])
  @@index([vendedorId])
  @@index([compradorId])
  @@index([dataVenda])
  @@index([status]) // Novo índice
  @@index([categoria]) // Novo índice
}

enum vendaStatus {
  PENDENTE
  CONCLUIDA
  CANCELADA
}

enum combustivel {
  GASOLINA
  ETANOL
  FLEX
  DIESEL
  ELETRICO
  HIBRIDO
  GNV
}

enum cambio {
  MANUAL
  AUTOMATICO
  SEMI_AUTOMATICO
  CVT
}

enum carroceria {
  HATCH
  SEDAN
  SUV
  PICAPE
  COUPE
  CONVERSIVEL
  PERUA
  MINIVAN
  VAN
  BUGGY
  OFFROAD
}

enum categoria {
  HYPERCAR
  SUPERCAR
  SPORTS_CAR
  CLASSIC_MUSCLE
  MODERN_MUSCLE
  RETRO_SUPER
  DRIFT_CAR
  TRACK_TOY
  OFFROAD
  BUGGY
  PICKUP_4X4
  SUV
  HOT_HATCH
  SALOON
  GT
  RALLY
  CONCEPT
}

enum classe {
  D
  C
  B
  A
  S1
  S2
  X
}

enum statusVeiculo {
  DISPONIVEL
  RESERVADO
  VENDIDO
  INDISPONIVEL
}
