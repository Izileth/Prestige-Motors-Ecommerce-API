generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                  String      @id @default(auto()) @map("_id") @db.ObjectId
  nome                String
  email               String      @unique
  slug                String?
  senha               String
  role                String      @default("USER")
  telefone            String?
  enderecos           Address[]   // Relação one-to-many
  cpf                 String?     // Sem @unique
  dataNascimento      DateTime?
  avatar              String?
  emailVerificado     Boolean     @default(false)
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
  vehicles            Vehicle[]
  veiculosFavoritos   Favorites[]
  visualizacoes       ViewLog[]
  avaliacoes          Review[]
  vendasComoVendedor  Sale[]      @relation("VendasComoVendedor")
  vendasComoComprador Sale[]      @relation("VendasComoComprador")
  
  negociacoesComoComprador Negociations[] @relation("NegociacoesComoComprador")
  negociacoesComoVendedor  Negociations[] @relation("NegociacoesComoVendedor")
  taxaAceitacao            Float?      
  
  negociacoesHistorico NegotiationsHistory[] 
  
  mensagens Mensage[]

  // Recuperação de senha
  resetToken       String?
  resetTokenExpiry DateTime?

  // Controle de login e sessão
  isLoggedIn       Boolean   @default(false)  // Se o usuário está logado
  lastLoginAt      DateTime? // Última vez que fez login
  lastLogoutAt     DateTime? // Última vez que fez logout
  currentSessionId String?   // ID da sessão atual (opcional)
  loginCount       Int       @default(0)      // Contador total de logins
}

model Vehicle {
  id                    String        @id @default(auto()) @map("_id") @db.ObjectId
  marca                 String
  modelo                String
  anoFabricacao         Int
  anoModelo             Int
  preco                 Float
  precoPromocional      Float?
  descricao             String?
  quilometragem         Float
  tipoCombustivel       combustivel
  cambio                cambio
  cor                   String
  portas                Int
  finalPlaca            Int?
  carroceria            carroceria
  potencia              Int? // cv
  motor                 String?
  categoria             categoria
  classe                classe
  imagens               Image[]
  videos                Video[]
  especificacoes        Json? // Detalhes técnicos em JSON
  vendedorId            String        @db.ObjectId
  vendedor              User          @relation(fields: [vendedorId], references: [id])
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  status                statusVeiculo @default(DISPONIVEL)
  visualizacoes         Int           @default(0)
  favoritos             Favorites[]
  visualizacoesDetalhes ViewLog[]
  avaliacoes            Review[]
  vendas                Sale[]
  destaque              Boolean       @default(false)
  seloOriginal          Boolean       @default(false)
  aceitaTroca           Boolean       @default(false)
  parcelamento          Float? // Valor da parcela exemplo

  localizacao   Address? @relation(fields: [localizacaoId], references: [id])
  localizacaoId String?   @db.ObjectId // Sem @unique
  
  aceitaNegociacao  Boolean     @default(true) // Novo campo
  negociacoes Negociations[]

  @@index([marca])
  @@index([modelo])
  @@index([anoFabricacao])
  @@index([anoModelo])
  @@index([preco])
  @@index([categoria])
  @@index([classe])
  @@index([status])
  @@index([destaque])
}

model Address {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  cep         String
  logradouro  String
  numero      String
  complemento String?
  bairro      String
  cidade      String
  estado      String
  pais        String    @default("Brasil")
  latitude    Float?
  longitude   Float?
  vehicles    Vehicle[] // Múltiplos veículos podem usar o mesmo endereço
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @db.ObjectId // Chave estrangeira
  createdAt   DateTime? @default(now()) // Temporariamente nullable
  updatedAt   DateTime  @updatedAt
}

model Favorites {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId 
  vehicleId String   @db.ObjectId 
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  vehicle   Vehicle  @relation(fields: [vehicleId], references: [id])

  @@unique([userId, vehicleId])
  @@index([userId])
  @@index([vehicleId])
}

model ViewLog {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  vehicleId String   @db.ObjectId // ✅ Corrigido
  userId    String?  @db.ObjectId // ✅ Corrigido (note o "?" para campos opcionais)
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  vehicle   Vehicle  @relation(fields: [vehicleId], references: [id])
  user      User?    @relation(fields: [userId], references: [id])

  @@index([vehicleId])
  @@index([userId])
  @@index([createdAt])
}

model Image {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  url       String
  isMain    Boolean @default(false)
  ordem     Int     @default(0)
  vehicleId String  @db.ObjectId
  vehicle   Vehicle @relation(fields: [vehicleId], references: [id])

  @@index([vehicleId])
}

model Video {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  url       String
  isMain    Boolean @default(false)
  vehicleId String  @db.ObjectId
  vehicle   Vehicle @relation(fields: [vehicleId], references: [id])

  @@index([vehicleId])
}

model Review {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  vehicleId  String   @db.ObjectId // ✅ Corrigido
  userId     String?  @db.ObjectId // ✅ Corrigido (note o "?" para campos opcionais)
  rating     Int      @default(5) // 1-5 estrelas
  comentario String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  vehicle    Vehicle  @relation(fields: [vehicleId], references: [id])
  user       User?    @relation(fields: [userId], references: [id]) // Relação opcional

  @@index([vehicleId])
  @@index([userId])
}


model Negociations{
  id                String       @id @default(auto()) @map("_id") @db.ObjectId
  vehicleId         String       @db.ObjectId
  compradorId       String       @db.ObjectId
  vendedorId        String       @db.ObjectId
  status            statusNegociacao @default(ABERTA)
  precoSolicitado   Float        // Preço original do veículo
  precoOfertado     Float        // Oferta do comprador
  precoNegociado    Float?       // Preço acordado (quando fechado)
  mensagens         Mensage[]   // Histórico de mensagens
  dataExpiracao     DateTime?    // Prazo para resposta
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  motivoRecusa      String?
  dataFechamento    DateTime?
  deleteScheduledAt DateTime? 
  
  historico NegotiationsHistory[] 
  
  // Relações
  vehicle   Vehicle  @relation(fields: [vehicleId], references: [id])
  comprador User     @relation("NegociacoesComoComprador", fields: [compradorId], references: [id])
  vendedor  User     @relation("NegociacoesComoVendedor", fields: [vendedorId], references: [id])

  tempoMedioResposta Int?       

  @@map("negociations")

  @@index([compradorId, status, updatedAt])
  @@index([vendedorId, status, updatedAt])
  @@index([status])
  @@index([createdAt])
}


model Sale {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  vehicleId        String    @db.ObjectId
  vendedorId       String    @db.ObjectId
  compradorId      String    @db.ObjectId
  precoVenda       Float
  formaPagamento   String
  parcelas         Int?
  observacoes      String?
  categoria        categoria
  status           String?   @default("CONCLUIDA")
  categoriaVeiculo String? // Novo campo
  dataVenda        DateTime  @default(now())
  dataCriacao      DateTime  @default(now())
  dataAtualizacao  DateTime  @updatedAt

  // Relações
  vehicle   Vehicle @relation(fields: [vehicleId], references: [id])
  vendedor  User    @relation("VendasComoVendedor", fields: [vendedorId], references: [id])
  comprador User    @relation("VendasComoComprador", fields: [compradorId], references: [id])

  @@index([vehicleId])
  @@index([vendedorId])
  @@index([compradorId])
  @@index([dataVenda])
  @@index([status]) // Novo índice
  @@index([categoria]) // Novo índice
}

model Mensage {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  negociacaoId String      @db.ObjectId
  autorId      String      @db.ObjectId
  conteudo     String
  tipo         tipoMensagem @default(TEXTO)
  anexoUrl     String?
  createdAt    DateTime    @default(now())
  
  // Relações
  negociacao Negociations @relation(fields: [negociacaoId], references: [id])
  autor      User       @relation(fields: [autorId], references: [id])

  @@index([negociacaoId])
  @@index([autorId])
}

model NegotiationsHistory {
  id             String      @id @default(auto()) @map("_id") @db.ObjectId
  negociacaoId   String      @db.ObjectId
  acao           String      // "CRIACAO", "MENSAGEM", "RESPOSTA", "CANCELAMENTO", etc.
  detalhes       Json?       // Dados adicionais em JSON
  usuarioId      String      @db.ObjectId
  createdAt      DateTime    @default(now())
  

  negociacao Negociations @relation(fields: [negociacaoId], references: [id])
  usuario    User         @relation(fields: [usuarioId], references: [id])

  @@index([negociacaoId])
  @@index([usuarioId])
  @@index([createdAt])
}

enum vendaStatus {
  PENDENTE
  CONCLUIDA
  CANCELADA
}

enum combustivel {
  GASOLINA
  ETANOL
  FLEX
  DIESEL
  ELETRICO
  HIBRIDO
  GNV
}

enum cambio {
  MANUAL
  AUTOMATICO
  SEMI_AUTOMATICO
  CVT
}

enum carroceria {
  HATCH
  SEDAN
  SUV
  PICAPE
  COUPE
  CONVERSIVEL
  PERUA
  MINIVAN
  VAN
  BUGGY
  OFFROAD
}

enum categoria {
  HYPERCAR
  SUPERCAR
  SPORTS_CAR
  CLASSIC_MUSCLE
  MODERN_MUSCLE
  RETRO_SUPER
  DRIFT_CAR
  TRACK_TOY
  OFFROAD
  BUGGY
  PICKUP_4X4
  SUV
  HOT_HATCH
  SALOON
  GT
  RALLY
  CONCEPT
}

enum classe {
  D
  C
  B
  A
  S1
  S2
  X
}

enum statusVeiculo {
  DISPONIVEL
  RESERVADO
  VENDIDO
  INDISPONIVEL
}


enum statusNegociacao {
  ABERTA
  CONTRA_OFERTA
  ACEITA
  RECUSADA
  EXPIRADA
  CANCELADA
  FINALIZADA
}

enum tipoMensagem {
  TEXTO
  OFERTA
  CONTRA_OFERTA
  ANEXO
  SISTEMA
}